

services:
 airflow:
   build: ./airflow
   image: apache/airflow:2.6.1
   depends_on:
    postgres:
      condition: service_healthy
    minio:
      condition: service_started
   environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://nitro_user:nitro_pass@postgres/nitro_db
    - AIRFLOW__CORE__LOAD_EXAMPLES=false
    - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
    - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    - AIRFLOW__LOGGING__BASE_LOG_FOLDER=/opt/airflow/logs
    - AIRFLOW__LOGGING__REMOTE_LOGGING=False
   volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
   ports:
    - "8080:8080"
   healthcheck:
     test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
     interval: 30s
     timeout: 30s
     retries: 3
   entrypoint: /opt/airflow/entrypoint.sh



 spark-master:
    image: bitnami/spark:3.3
    ports:
      - "8081:8080"
    volumes:
      - ./spark-processing:/opt/spark-apps

 spark-worker:
    image: bitnami/spark:3.3
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077

 zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

 kafka:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ''
      KAFKA_SSL_CLIENT_AUTH: none

 postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: nitro_user
      POSTGRES_PASSWORD: nitro_pass
      POSTGRES_DB: nitro_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-setup/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nitro_user -d nitro_db"]
      interval: 5s
      timeout: 5s
      retries: 10

 minio:
    image: minio/minio:latest
    container_name: proyecto-nitro_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin12345
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

 minio-setup:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./minio-setup:/scripts
    entrypoint: /scripts/create-bucket.sh

 processor:
    build: ./python-processor
    depends_on:
      - kafka
      - postgres
      - minio
    volumes:
      - ./python-processor:/app
    environment:
      KAFKA_BROKERS: "kafka:9092"
      POSTGRES_HOST: "postgres"
      POSTGRES_DB: "nitro_db"
      POSTGRES_USER: "nitro_user"
      POSTGRES_PASSWORD: "nitro_pass"
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: "admin"
      MINIO_SECRET_KEY: "admin12345"
      MINIO_BUCKET_NAME: "raw-data"



 streamlit:
  build:
    context: ./api-dashboard/dashboards
    dockerfile: Dockerfile
  container_name: proyecto-nitro_streamlit
  depends_on:
     postgres:
      condition: service_started
      required: true

  ports:
    - "8501:8501"

 grafana:
    image: grafana/grafana:latest
    container_name: proyecto-nitro_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana  ## Referencia al volumen
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    depends_on:
      - postgres

 kafka-producer:
    build: ./kafka-producer
    container_name: proyecto-nitro-kafka-producer
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped     


volumes:
  postgres_data:
  minio_data:
  grafana_data:
